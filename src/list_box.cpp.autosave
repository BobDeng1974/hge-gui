#include "render_adapter.h"
#include "scrollbar.h"
#include "desktop_adapter.h"
#include "list_box.h"
#include "widget_animation.h"

namespace Gui
{
    float delta = 0.0f;    

    ListBox::ListBox(float x, float y, float width, float height, Widget *parent)
        : Widget(x, y, width, height, parent)
    {
        m_scroll = new ScrollBar(width - 5, 0, 5, height, this);
        m_scroll->Visible(false);
        m_scroll->SigValueChanged.Connect(new ValueChanged<ListBox, int>(this, &ListBox::SetStartItem));
        m_scroll->Fixed(true);
        m_scroll->Moveable(false);
        m_scroll->GetAnimation()->PlayFocused();
    }

    ListBox::~ListBox()
    {
        while (!m_items.empty())
        {
            delete m_items.back();
            m_items.pop_back();
        }
    }

    void ListBox::OnRepaint(RenderAdapter *r)
    {
        Widget::OnRepaint(r);
        if (!Visible())
            return;

        if (m_need_update)
            Update();

        r->PushSate();
        r->Translate(LocalX(), LocalY());


        if (m_current_item != -1 && m_current_item >= m_start_item && m_current_item < m_start_item + m_visible_count)
        {
            float h = GetManager()->GetFont()->GetCharacterHeight('I') + delta;
            float qx = 0;
            float qy = float(m_current_item - m_start_item) * h;
            r->PushSate();
            r->SetColor(0, 0.1, 0.4);
            r->SetAlpha(0.7);
            r->DrawQuad(qx, qy, Width() - 5, h);
            r->PopState();
        }

        float x = 0;
        float y = 0;

        for (int i = m_start_item; i <= m_start_item + m_visible_count && i != m_items.size(); ++i)
        {
            float h = GetManager()->GetFont()->GetCharacterHeight('I') + delta;
            r->SetColor(0, 0, 0);
            int size = m_items[i]->name.size();
            int count = 0;
            float width = 0;
            for (int j = 0; j != size; ++j)
            {
                float delta = GetManager()->GetFont()->GetCharacterWidth(m_items[i]->name[j]);
                if (delta + width > Width() - 5)
                    break;
                count++;
                width += delta;
            }
            r->DrawTextLine(x, y, m_items[i]->name.substr(0, count));
            y += GetManager()->GetFont()->GetCharacterHeight('I') + delta;
        }

        r->PopState();
    }

    void ListBox::OnMousePress(const Event &e)
    {
        if (!IsFocused())
            return;

        Widget::OnMousePress(e);
        float h = GetManager()->GetFont()->GetCharacterHeight('I') + delta;
        int item = m_start_item + (e.e.y - GlobalY()) / h;
        if (item == m_current_item)
            return;
        if (item > m_items.size())
        {
            m_current_item = -1;
            return;
        }
        m_current_item = item;
        SigItemSelected(SimpleType<int>(m_current_item));
        Update();
    }

    void ListBox::Update()
    {
        m_visible_count = Height() / (GetManager()->GetFont()->GetCharacterHeight('I') + delta);
        int count = m_items.size();
        if (count < m_visible_count)
        {
            m_scroll->Visible(false);
        }
        else
        {
            m_scroll->Visible(true);
            m_scroll->SetMinMax(0, count - m_visible_count);
        }
        m_need_update = false;
    }
    

    void ListBox::AddItems(const std::vector<std::string> &value)
    {
        for (auto name : value)
        {
            Item* b(new Item(name));
            m_items.push_back(b);
        }
        m_need_update = true;
    }

    void ListBox::SetStartItem(int index)
    {
        m_start_item = index;
        m_need_update = true;
    }

    void ListBox::OnMouseWheel(const Event &e)
    {
        int count = m_items.size();
        m_start_item -= e.e.wheel;
        m_start_item = std::max(std::min(m_start_item, count - m_visible_count), 0);
        m_scroll->Position(m_start_item);
        //Update();
    }

    Item* ListBox::CurrentItem()
    {
        if (m_current_item != -1)
            return m_items[m_current_item];
        return nullptr;
    }

    const Item* ListBox::CurrentItem() const
    {
        if (m_current_item != -1)
            return m_items[m_current_item];
        return nullptr;
    }

    void ListBox::AddItem(const std::string &name, void *data)
    {
        m_items.push_back(new Item(name, data));
    }

    void ListBox::SetCurrentItem(int index)
    {
        int prev = m_current_item;

        if (index < 0 || index >= (int)m_items.size())
            m_current_item = -1;
        else
            m_current_item = -1;
        if (prev != m_current_item)
        {
            m_current_item = prev;
            SigItemSelected(SimpleType<int>(m_current_item));
        }
    }

    void ListBox::ResetSelection()
    {
        m_current_item = -1;
    }
}
